package com.jhlabs.image;


import com.jhlabs.image.EdgeFilter;
//import java.awt.Label;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import java.awt.*;
import java.awt.geom.Point2D;
import java.sql.*;
//import sun.java2d.loops.DrawLine;
import javax.swing.*;

/**
 *
 * @author cengslymn
 */
public class MainJFrame extends javax.swing.JFrame {

    public static  Vector vGoncerilecek = new Vector();
    /** Creates new form MainJFrame */
    public MainJFrame() {
        initComponents();
    }
    //Convex_Hull paket= new Convex_Hull();
    //Convex_Hull paket2= new Convex_Hull();
    private Connection conn;
    String sorgudis="";
    String sorgudis2="";
    String sorguic="";
    //String sorguic="";
    String sorgu="MULTIPOINT(";
    String sorgu2="MULTIPOINT(";
    int centerx=0, centery=0;
    int centerx2=0, centery2=0;
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Poligon 1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(new java.awt.GridLayout(1, 2));

        jScrollPane1.setViewportView(jLabel1);

        jPanel1.add(jScrollPane1);

        jScrollPane2.setViewportView(jLabel2);

        jPanel1.add(jScrollPane2);

        jButton2.setText("VTye Kayıt");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel3.setText("Harita Ölçek:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel4.setText("Şekil");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seçiniz...", "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jComboBox1MouseEntered(evt);
            }
        });

        jButton3.setText("Alan Sorgulama");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Çevre Sorgulama");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel5.setText("Hesaplanan");

        jLabel6.setText("Gerçek");

        jLabel7.setText("Gerçek");

        jLabel8.setText("Hesaplanan");

        jLabel9.setText("jLabel9");

        jLabel10.setText("jLabel10");

        jLabel11.setText("jLabel11");

        jLabel12.setText("jLabel12");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButton4, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE)
                            .addComponent(jButton3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                    .addComponent(jLabel8)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel11))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                    .addComponent(jLabel7)
                                    .addGap(49, 49, 49)
                                    .addComponent(jLabel12)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel5))
                                .addGap(26, 26, 26)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel10))))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(33, 33, 33)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jLabel9)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel10))
                .addGap(44, 44, 44)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton4)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jLabel12))))
                .addContainerGap(11, Short.MAX_VALUE))
        );

        jLabel13.setText("İsim:");

        jLabel14.setText("Gerçek alan:");

        jLabel15.setText("Gerçek Çevre:");

        jLabel16.setText("Önce");

        jLabel17.setText("Sonra");

        jButton5.setText("Poligon 2 ");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel18.setText("jLabel18");

        jLabel19.setText("jLabel19");

        jButton6.setText("VT-Concave");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Kayma  ");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jLabel20.setText("jLabel20");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jLabel16))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 641, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(69, 69, 69)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel19)
                                                .addComponent(jLabel18))
                                            .addComponent(jButton7))
                                        .addGap(55, 55, 55)
                                        .addComponent(jLabel20))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jButton1)
                                            .addComponent(jButton2))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel14)
                                            .addComponent(jLabel13)
                                            .addComponent(jLabel15))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jTextField3)
                                            .addComponent(jTextField4)
                                            .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                                        .addGap(40, 40, 40)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel17)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(jButton6)
                                                .addComponent(jButton5)))))))))
                .addContainerGap(498, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton1)
                            .addComponent(jLabel13))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel14)
                                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel15)
                                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jButton2)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton5))
                        .addGap(18, 18, 18)
                        .addComponent(jButton6)
                        .addGap(37, 37, 37)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton7)
                            .addComponent(jLabel20))
                        .addGap(68, 68, 68)
                        .addComponent(jLabel18)
                        .addGap(46, 46, 46)
                        .addComponent(jLabel19))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:// ilk şekil için koordinatların belirlenmesi
        JFileChooser fileChooser = new JFileChooser(System.getProperty("user.dir"));

        fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);

        if(fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
        {
            File file = fileChooser.getSelectedFile();

            try {
                BufferedImage image = ImageIO.read(file);

                int width = image.getWidth();
                int height = image.getHeight();
                
                jLabel1.setIcon(new ImageIcon(image));


                int[] pixels = new int[image.getWidth()*image.getHeight()];

                pixels = image.getRGB(0, 0, image.getWidth(), image.getHeight(), pixels, 0, image.getWidth());

                // to convert gray level
                int[] grayPixels = convertToGrayLevelPixels(pixels);
                BufferedImage GrayImage=new BufferedImage(image.getWidth(), image.getHeight(),BufferedImage.TYPE_INT_ARGB);
                GrayImage.setRGB(0, 0, image.getWidth(), image.getHeight(), grayPixels, 0, image.getWidth());

                //edge image
                int[] edgePixels = new int[image.getWidth()*image.getHeight()];
                EdgeFilter edgeFilter = new EdgeFilter();
                edgePixels = edgeFilter.filterPixels(image.getWidth(), image.getHeight(), grayPixels, null);

                //thresholded ımage
                OtsuThresholder thrsholdFilter = new OtsuThresholder();
                int thr = thrsholdFilter.thresh(edgePixels);
                int [] thresholdedPixels=thresholdMethod(edgePixels,thr); //edgepixelleri thr ye göre değiştirip geri donuyor
                BufferedImage edgeImage = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_ARGB);
             //   System.out.println(String.valueOf(thr));
                edgeImage.setRGB(0, 0, image.getWidth(), image.getHeight(), edgePixels, 0, image.getWidth());
                
                BufferedImage ContourImage = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_ARGB);
                int [] contourPixels=contour_based(edgeImage);

                //contour image
                ContourImage.setRGB(0, 0, image.getWidth(), image.getHeight(), contourPixels, 0,image.getWidth());
                int numberOfPoints=0;
                
                Vector v = new Vector();
                
                jLabel1.setIcon(new ImageIcon(ContourImage));
                File kaydedilecek=new File("C:\\resimler\\vector.jpg");
                ImageIO.write(ContourImage, "jpg", kaydedilecek);
                for(int i=0;i<contourPixels.length;i++){
                    int k=(contourPixels[i] >> 16) & 0xff;
                    if(k==255){
                        numberOfPoints++;
                        System.out.println(String.valueOf(i/image.getWidth())+","+String.valueOf(i %image.getWidth())+"\n");
                        Point kordi= new Point();
                        kordi.x=i/image.getWidth();
                        kordi.y=i %image.getWidth();
                        centerx+=kordi.x;
                        centery+=kordi.y;
                        v.addElement(kordi); 
                              }
                }

                vGoncerilecek=v;
                
                // Vector nesne si olan "v" gönderilecek client a

                centerx/=numberOfPoints;
                centery/=numberOfPoints;
                 //System.out.println(String.valueOf(v.size())+"\n");
                System.out.println(String.valueOf(numberOfPoints)+"\n");//number of points
                Point kordi1= new Point();
                for (int m = 0; m < v.size(); m++) {
                    kordi1=(Point)v.get(m);
                    System.out.println(String.valueOf(kordi1.x)+","+String.valueOf(kordi1.y)+"\n");

                                                     }
             //   System.out.println(String.valueOf(numberOfPoints)+"\n");//number of points
                
                Convex_Hull paket= new Convex_Hull();
                paket.vecN=v;
                paket.wrap();
                paket.vecHull.addElement(paket.vecHull.firstElement());// polygon's first point and end point must be same
                System.out.println("\n"+"\n"+"\n"+"\n"+"\n");//number of points
                for (int m = 0; m < paket.vecHull.size()-1; m++) { //to show coordinates
                    kordi1=(Point) paket.vecHull.get(m);
                            System.out.println(String.valueOf(kordi1.x)+","+String.valueOf(kordi1.y)+"\n");
                            sorgu+="("+String.valueOf(kordi1.x)+" "+String.valueOf(kordi1.y)+"),";
                                                     }
                            kordi1=(Point) paket.vecHull.get(paket.vecHull.size()-1);
                            sorgu+="("+String.valueOf(kordi1.x)+" "+String.valueOf(kordi1.y);
                            sorgu+="))";
                            System.out.println(sorgu);
              // System.out.println(String.valueOf(paket.vecN.size())+"\n");//number of points
                   
                            ///////////
               jLabel2.setIcon(new ImageIcon(drawPolygonLines(paket.vecHull, width, height)));

            }catch (IOException ex) {
                Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
                                    }
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private BufferedImage drawPolygonLines(Vector points, int width, int height)
    {
        BufferedImage polygonImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
        
        Graphics2D g2 = polygonImage.createGraphics();
        g2.setBackground(Color.BLACK);
        g2.setColor(Color.WHITE);
        g2.setStroke(new BasicStroke(2.0f));
        
        for(int i=0; i<points.size()-1; i++)
        {
            Point p1 = (Point)points.get(i);
            Point p2 = (Point)points.get(((i+1) % points.size()));
            
            g2.drawLine(p1.y, p1.x, p2.y, p2.x);
        }
        
        return polygonImage;
    }
    
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here: // veri tabanına kayıt
        try {
            
            conn = DriverManager.getConnection(
                                            "jdbc:postgresql://127.0.0.1:5432/vectorization", "postgres",
                                            "postgres"); 
            PreparedStatement st = conn.prepareStatement("SELECT ST_AsText(ST_ConvexHull(ST_Collect(ST_GeomFromText('"+sorgu+"')))) as Convex, "
                    + "ST_AsText(ST_ConvexHull(ST_Collect(ST_GeomFromText('"+sorgu2+"'))) ) as Convex2");
            ResultSet rs = st.executeQuery();
            //JOptionPane.showMessageDialog(null,"bağlatı var");
             while(rs.next()){
            sorgudis=(rs.getString("Convex").toString());
            sorgudis2=(rs.getString("Convex2").toString());
                             }
            rs.close();
            st.close();
            System.out.println("******"+ sorgudis+"*******");
            System.out.println("******"+ jTextField3.getText().toString()+"*******");
            PreparedStatement st1 = conn.prepareStatement("INSERT INTO dbpoligon VALUES('"+jTextField1.getText().toString()+"','"+sorgudis+"','"+jTextField3.getText().toString()+"','"+jTextField4.getText().toString()+"','"+sorgudis2+"')");
            ResultSet rs1 = st1.executeQuery();
            rs1.close();
            st1.close();
           
            conn.close();   
        } catch (SQLException e) {
           System.err.println( "Connection attempt failed" );
           System.err.println( e.getMessage());
        }
           JOptionPane.showMessageDialog(null,"Veri Tabanına kayıt yapılmıştır.");
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jComboBox1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox1MouseEntered
        // TODO add your handling code here: //hangi şekil?
        try {
            jComboBox1.removeAllItems();
            conn = DriverManager.getConnection(
                                            "jdbc:postgresql://127.0.0.1:5432/vectorization", "postgres",
                                            "postgres");
            PreparedStatement st = conn.prepareStatement("SELECT ad From dbpoligon");
            ResultSet rs = st.executeQuery();
            while(rs.next()){
            jComboBox1.addItem(rs.getString("ad"));
            }
            rs.close();
            st.close();
            
            conn.close();            
        } catch (SQLException e) {
           // Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
           System.err.println( "Connection attempt failed" );
           System.err.println( e.getMessage());
        }
    }//GEN-LAST:event_jComboBox1MouseEntered

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here: Alan Sorgulama
        String s="", str="";
        long s1=0;
        long s2=0;
        long s3=0;
        long sonuc=0;
        long alan=0;
        long alan_son=0;
        System.out.print(jComboBox1.getSelectedItem().toString());
        
        try {
            
            conn = DriverManager.getConnection(
                                            "jdbc:postgresql://127.0.0.1:5432/vectorization", "postgres",
                                            "postgres");
            PreparedStatement st = conn.prepareStatement("SELECT Round(ST_Area(poligononce)) AS Alan, Round(ST_Area(poligonsonra)) AS AlanSon,area AS Gercek FROM dbpoligon Where ad='"+jComboBox1.getSelectedItem().toString()+"'");
            ResultSet rs = st.executeQuery();
            while(rs.next()){
            alan=rs.getInt("Gercek");
            s1=rs.getInt("Alan");
            s3=rs.getInt("AlanSon");
           }
            rs.close();
            st.close();
            
            conn.close();
        } catch (SQLException e) {
           System.err.println( "Connection attempt failed" );
           System.err.println( e.getMessage());
        }
        s2=Integer.parseInt(jTextField2.getText().toString());//ölcek 
        sonuc=s2*s2*s1;
        s=String.valueOf(sonuc)+" km2";
        alan_son=s2*s2*s3;
        str=String.valueOf(alan_son)+" km2"; 
        jLabel9.setText(s);
        jLabel10.setText(String.valueOf(alan));
        jLabel18.setText(str);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here://Çevre Sorgulama
        String al="", al2="";
        long t1=0;
        long t2=0;
        long t3=0;
        long sonuc=0;
        long cevre=0;
        long cevre_son=0;
        try {
            /*to tell JDBC to which server you want to connect
             A JDBC URL is composed of three parts
             jdbc:postgresql:database or jdbc:postgresql://host:port/database
             Connection con = DriverManager.getConnection( url, user, pwd );  */
            conn = DriverManager.getConnection(
                                            "jdbc:postgresql://127.0.0.1:5432/vectorization", "postgres",
                                            "postgres");
            PreparedStatement st = conn.prepareStatement("SELECT Round(ST_length (ST_Boundary(poligononce))) AS CevreOnce,Round(ST_length (ST_Boundary(poligonsonra))) AS CevreSon, cevre AS Cevre FROM dbpoligon WHERE ad='"+jComboBox1.getSelectedItem().toString()+"'");
            ResultSet rs = st.executeQuery();
            while(rs.next()){
            cevre=rs.getInt("Cevre");
            t1=rs.getInt("CevreOnce"); System.out.println(String.valueOf(t1));
            t2=rs.getInt("CevreSon");System.out.println(String.valueOf(t2));
                            }
            rs.close();
            st.close();
            
            conn.close();
                    
        } catch (SQLException e) {
           System.err.println( "Connection attempt failed" );
           System.err.println( e.getMessage());
        }
         t3=Integer.parseInt(jTextField2.getText().toString()); //olcek
         sonuc=t3*t1;
         al=String.valueOf(sonuc)+" km";
         cevre_son=t3*t2;
         al2=String.valueOf(cevre_son)+" km";
         jLabel11.setText(al);
         jLabel12.setText(String.valueOf(cevre));
         jLabel19.setText(al2);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here: //2. poligon koordinatlar
        JFileChooser fileChooser2 = new JFileChooser(System.getProperty("user.dir"));

        fileChooser2.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);

        if(fileChooser2.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
        {
            File file = fileChooser2.getSelectedFile();

            try {
                BufferedImage image = ImageIO.read(file);

                int width = image.getWidth();
                int height = image.getHeight();

                jLabel2.setIcon(new ImageIcon(image));


                int[] pixels = new int[image.getWidth()*image.getHeight()];

                pixels = image.getRGB(0, 0, image.getWidth(), image.getHeight(), pixels, 0, image.getWidth());

                // to convert gray level
                int[] grayPixels = convertToGrayLevelPixels(pixels);
                BufferedImage GrayImage=new BufferedImage(image.getWidth(), image.getHeight(),BufferedImage.TYPE_INT_ARGB);
                GrayImage.setRGB(0, 0, image.getWidth(), image.getHeight(), grayPixels, 0, image.getWidth());

                //edge image
                int[] edgePixels = new int[image.getWidth()*image.getHeight()];
                EdgeFilter edgeFilter = new EdgeFilter();
                edgePixels = edgeFilter.filterPixels(image.getWidth(), image.getHeight(), grayPixels, null);
                /*BufferedImage ara=new BufferedImage(image.getWidth(), image.getHeight(),BufferedImage.TYPE_INT_ARGB);
                ara.setRGB(0, 0, image.getWidth(), image.getHeight(), edgePixels, 0, image.getWidth());*/

                //thresholded ımage
                OtsuThresholder thrsholdFilter = new OtsuThresholder();
                int thr = thrsholdFilter.thresh(edgePixels);
                int [] thresholdedPixels=thresholdMethod(edgePixels,thr); //edgepixelleri thr ye göre değiştirip geri donuyor
                BufferedImage edgeImage = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_ARGB);
             //   System.out.println(String.valueOf(thr));
                edgeImage.setRGB(0, 0, image.getWidth(), image.getHeight(), edgePixels, 0, image.getWidth());

                BufferedImage ContourImage = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_ARGB);
                int [] contourPixels=contour_based(edgeImage);

                //cıntour image
                ContourImage.setRGB(0, 0, image.getWidth(), image.getHeight(), contourPixels, 0,image.getWidth());
                int numberOfPoints=0;
                Vector v = new Vector();

                jLabel2.setIcon(new ImageIcon(ContourImage));
                for(int i=0;i<contourPixels.length;i++){
                    int k=(contourPixels[i] >> 16) & 0xff;
                    if(k==255){
                        numberOfPoints++;
                        System.out.println(String.valueOf(i/image.getWidth())+","+String.valueOf(i %image.getWidth())+"\n");
                        Point kordi= new Point();
                        kordi.x=i/image.getWidth();
                        kordi.y=i %image.getWidth();
                        centerx2+=kordi.x;
                        centery2+=kordi.y;
                        v.addElement(kordi);
                              }
                }
                centerx2/=numberOfPoints;
                centery2/=numberOfPoints;
                System.out.println(String.valueOf(numberOfPoints)+"\n");//number of points
                Point kordi1= new Point();
                for (int m = 0; m < v.size(); m++) {
                    kordi1=(Point)v.get(m);
                    System.out.println(String.valueOf(kordi1.x)+","+String.valueOf(kordi1.y)+"\n");

                                                     }
             //   System.out.println(String.valueOf(numberOfPoints)+"\n");//number of points

                Convex_Hull paket2= new Convex_Hull();
                paket2.vecN=v;
                paket2.wrap();
                paket2.vecHull.addElement(paket2.vecHull.firstElement());// polygon's first point and end point must be same
                System.out.println("\n"+"\n"+"\n"+"\n"+"\n");//number of points
                for (int m = 0; m < paket2.vecHull.size()-1; m++) { //to show coordinates
                    kordi1=(Point) paket2.vecHull.get(m);
                            System.out.println(String.valueOf(kordi1.x)+","+String.valueOf(kordi1.y)+"\n");
                            sorgu2+="("+String.valueOf(kordi1.x)+" "+String.valueOf(kordi1.y)+"),";
                                                     }
                            kordi1=(Point) paket2.vecHull.get(paket2.vecHull.size()-1);
                            sorgu2+="("+String.valueOf(kordi1.x)+" "+String.valueOf(kordi1.y);
                            sorgu2+="))";
                            System.out.println(sorgu2);
              // System.out.println(String.valueOf(paket.vecN.size())+"\n");//number of points

            }catch (IOException ex) {
                Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }


        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here: // iç bükey veri tabanına kayıt
        try {
            System.out.println(sorgu2);
            conn = DriverManager.getConnection(
                                            "jdbc:postgresql://127.0.0.1:5432/vectorization", "postgres",
                                            "postgres");
            PreparedStatement st = conn.prepareStatement("SELECT ST_AsText(ST_ConcaveHull(ST_Collect(ST_GeomFromText('"+sorgu2+"')))) as con");
            ResultSet rs = st.executeQuery();
            //JOptionPane.showMessageDialog(null,"bağlatı var");
             while(rs.next()){
            sorguic =(rs.getString("con"));
                             }
            rs.close();
            st.close();

            PreparedStatement st1 = conn.prepareStatement("INSERT INTO concave VALUES('"+jTextField1.getText().toString()+"','"+sorguic+"')");
            ResultSet rs1 = st1.executeQuery();
            rs1.close();
            st1.close();

            conn.close();
        } catch (SQLException e) {
           System.err.println( "concave kayıt hatası" );
           System.err.println( e.getMessage());
        }
           JOptionPane.showMessageDialog(null,"Veri Tabanına kayıt yapılmıştır.");
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        double kayma;
        kayma=Math.sqrt(Math.pow(centerx-centerx2, 2)+Math.pow(centery-centery2, 2));
        jLabel20.setText(String.valueOf(kayma));
    }//GEN-LAST:event_jButton7ActionPerformed

    // to get pixel of image
   public static int[] getImagePixels(BufferedImage image) {
        if (image == null) {
            throw new IllegalArgumentException("Image can not be null.");
        }

        int width = image.getWidth();
        int height = image.getHeight();

        int[] imagePixels = new int[width * height];

        imagePixels = image.getRGB(0, 0, width, height, imagePixels, 0, width);

        return imagePixels;
    }

   // to convert to gray level
    public static int[] convertToGrayLevelPixels(int[] pixels) {
        if (pixels == null) {
            throw new IllegalArgumentException("Pixels can not be null.");
        }

        int[] grayPixels = new int[pixels.length];

        for (int i = 0; i < pixels.length; i++) {

            int r = (pixels[i] >> 16) & 0xff;
            int g = (pixels[i] >> 8) & 0xff;
            int b = pixels[i] & 0xff;

            int rgb = (r + g + b) / 3;

            grayPixels[i] = 0xff000000 | (rgb << 16) | (rgb << 8) | rgb;
        }
        return grayPixels;
    }

    // to optain image contour
    public static int[] contour_based(BufferedImage image) {
    
         if (image == null) {
            throw new IllegalArgumentException("Image can not be null.");
        }
         int width = image.getWidth();
         int height = image.getHeight();
         
         int[] contourPixels = new int[width*height];
         int[] inPixels = new int[width * height];

         for(int i=0; i<contourPixels.length;i++)
         contourPixels[i] = 0xff000000;//black;
        inPixels = image.getRGB(0, 0, width, height, inPixels, 0, width);
         
         for (int y = 0; y < height; y++) { //soldan
             hereto:
			for (int x = 0; x < width; x++) {
				int r = (inPixels[y*width+x] >> 16) & 0xff;
				if(r==255){
				contourPixels[y*width+x] = 0xffffffff;//white;
                               break hereto;            
                                            }
                        }

		}
//         for (int y = 0; y < height; y++) { //sagdan
//             hereto:
//			for (int x = width-1; x >=0; x--) {
//				int r = (inPixels[y*width+x] >> 16) & 0xff;
//				if(r==255){
//				contourPixels[y*width+x] = 0xffffffff;//white;
//                               break hereto;
//                                            }
//                        }
//
//		}
         for (int x = 0; x < width; x++) { //yukarıdan
             hereto:
			for (int y = 0; y < height; y++) {
				int r = (inPixels[y*width+x] >> 16) & 0xff;
				if(r==255){
				contourPixels[y*width+x] = 0xffffffff;//white;
                               break hereto;            
                                            }
                        }

		}
//         for (int x = 0; x < width; x++) { //asagıdan
//             hereto:
//			for (int y = height-1; y >=0; y--) {
//				int r = (inPixels[y*width+x] >> 16) & 0xff;
//				if(r==255){
//				contourPixels[y*width+x] = 0xffffffff;//white;
//                               break hereto;
//                                            }
//                        }
//
//		} 
         return contourPixels;
    }
    
    public int[] thresholdMethod(int[] original, int value){
        for(int x = 0; x < original.length; x++){
            /**
             * int alpha = (pixel >> 24) & 0xff; 
             * int red   = (pixel >> 16) & 0xff;
             * int green = (pixel >>  8) & 0xff;
             * int blue  = (pixel      ) & 0xff;
             */
            if((original[x] & 0xff) >= value){
                original[x] = 0xffffffff;//white
                //System.out.println("original["+x+"] & 0xffffffff = " + (original[x] & 0xff));
            }else{
                original[x] = 0xff000000;//black
                //System.out.println("original["+x+"] & 0xff000000 = " + (original[x] & 0x00));
            }
        }
        return original;
    }//end of threshold

    /*
    public static int[] blueDetection(BufferedImage image) {
         if (image == null) {
            throw new IllegalArgumentException("Image can not be null.");
        }
         int width = image.getWidth();
         int height = image.getHeight();
         
         int[] bluePixels = new int[width*height];
         int[] inPixels = new int[width*height];
         inPixels = image.getRGB(0, 0, width, height, inPixels, 0, width);
         
         for (int y = 0; y < height; y++) { 
			for (int x = 0; x < width; x++) {
				int b = (inPixels[y*width+x]) & 0xff;
				if(b>=175)
                                    bluePixels[y*width+x] = 0xff0000ff;//mavi ve tonları
                                else 
                                    bluePixels[y*width+x] = 0xff000000;//-mavi            
                        }

		}
        return bluePixels;
    }*/
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainJFrame().setVisible(true);
            }
//            int i; Point kordi2=new Point();Point kordi3=new Point();
//            public void paint(Graphics g){
//                g.setColor(Color.red);
//                for(i=0;i<paket.vecHull.size()-1;i++){
//                    kordi2=(Point)paket.vecHull.get(i); kordi3=(Point)paket.vecHull.get(i+1);
//                    DrawLine(kordi2.x,kordi2.y,kordi3.x,kordi3.y);
//            }
//                kordi2=(Point)paket.vecHull.get(paket.vecHull.size()); kordi3=(Point)paket.vecHull.get(paket.vecHull.firstElement());
//                DrawLine(kordi2.x,kordi2.y,kordi3.x,kordi3.y);
//            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    // End of variables declaration//GEN-END:variables

}
